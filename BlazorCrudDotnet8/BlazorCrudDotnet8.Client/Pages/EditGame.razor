@page "/edit-game"
@page "/edit-game/{id:int}"
@inject IGameService GameService
@rendermode InteractiveAuto

@* here we use WebAssembly rendering *@

@* if there is no game - we create a new one. Otherwise we can edit already existing game *@
@if (Id == null)
{
    <h3>Create Game</h3>
}
else
{
    <h3>Edit @game.Name</h3>
}

@* FormName="editGame" - it is for SSR (server-side rendering) *@
<EditForm Model="game" OnSubmit="HandleSubmit">
    <label>Name</label>

    @* displays the input field for the game name, associating it with the "Name" property of the "Game" object. *@
    <InputText @bind-Value="game.Name">@game.Name</InputText>
    <button type="submit" class="btn btn-success">Submit</button>

    @* if there is already button - we can delete it *@
    @if (Id != null)
    {
        <button @onclick="DeleteGame" type="button" class="btn btn-danger">Delete</button>
    }
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    // [SupplyParameterFromForm] - for SSR 

    Game game { get; set; } = new Game { Name = string.Empty };

    // overwriting this method which is called during component parameter setting
    protected override async Task OnParametersSetAsync()
    {
        // if "Id" is not null
        if (Id.HasValue)
        {
            game = await GameService.GetGameById((int)Id);
        }
    }


    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await GameService.AddGame(game);
        }
        else
        {
            await GameService.EditGame((int)Id, game);
        }
    }

    async Task DeleteGame()
    {
        // we write (int) to convert from "int?" to "int"
        await GameService.DeleteGame((int)Id);
    }
}
